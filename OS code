import tkinter as tk
from tkinter import messagebox
from collections import deque

# Priority-based Round Robin scheduling
def priority_round_robin(processes, quantum, cache_size):
    n = len(processes)
    wt = [0] * n
    tat = [0] * n
    rem_bt = [0] * n
    cache = deque(maxlen=cache_size)
    output = []
    hits = 0
    misses = 0

    # Copy the burst time into rt[]
    for i in range(len(rem_bt)):
        rem_bt[i] = processes[i][1]

    t = 0  # Current time

    # Keep traversing processes in round robin manner until all of them are not done.
    while(1):
        done = True

        # Traverse all processes one by one repeatedly
        for i in range(n):

            # If burst time of a process is greater than 0 then only need to process further
            if (rem_bt[i] > 0):
                done = False  # There is a pending process

                # Check if process is in cache
                if processes[i][0] in cache:
                    # Process in cache has higher priority
                    q = quantum // 2
                    output.append(f"Process {processes[i][0]}: Cache hit")
                    hits += 1
                else:
                    q = quantum
                    output.append(f"Process {processes[i][0]}: Cache miss")
                    misses += 1

                if (rem_bt[i] > q):

                    # Increase the value of t i.e. shows how much time a process has been processed
                    t += q

                    # Decrease the burst_time of current process by quantum
                    rem_bt[i] -= q

                # If burst time is smaller than or equal to quantum. Last cycle for this process
                else:

                    # Increase the value of t i.e. shows how much time a process has been processed
                    t = t + rem_bt[i]

                    # Waiting time is current time minus time used by this process
                    wt[i] = t - processes[i][1]

                    # As the process gets fully executed make its remaining burst time = 0
                    rem_bt[i] = 0

                # Add process to cache
                if processes[i][0] not in cache:
                    cache.append(processes[i][0])

        # If all processes are done
        if (done == True):
            break

    # calculating turnaround time
    for i in range(n):
        tat[i] = processes[i][1] + wt[i]

    total = hits + misses
    hit_percentage = round((hits / total) * 100, 2)
    miss_percentage = round((misses / total) * 100, 2)

    return round(sum(wt) / n, 2), round(sum(tat) / n, 2), list(cache), output, hit_percentage, miss_percentage

# GUI for input and output
class Application(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.title("Priority Round Robin CPU Scheduling")
        self.geometry("300x200")

        self.processes = deque()

        self.label1 = tk.Label(self, text="Enter total number of processes:")
        self.label1.pack()

        self.entry1 = tk.Entry(self)
        self.entry1.pack()

        self.label2 = tk.Label(self, text="Enter cache size:")
        self.label2.pack()

        self.entry2 = tk.Entry(self)
        self.entry2.pack()

        self.button1 = tk.Button(self, text="Submit", command=self.get_processes)
        self.button1.pack()

    def get_processes(self):
        self.n = int(self.entry1.get())
        self.cache_size = int(self.entry2.get())
        if self.cache_size < 1:
            messagebox.showerror("Error", "Cache size must be at least 1.")
            return
        self.destroy()

        self.root2 = tk.Tk()
        self.root2.title("Enter Process Details")
        self.root2.geometry("400x300")

        for i in range(self.n):
            self.root2.columnconfigure(i, weight=1)
            self.root2.rowconfigure(i, weight=1)

            tk.Label(self.root2, text=f"Enter Process ID for P{i+1}:").grid(row=i, column=0)
            tk.Label(self.root2, text=f"Enter Burst Time for P{i+1}:").grid(row=i, column=2)

            tk.Entry(self.root2).grid(row=i, column=1)
            tk.Entry(self.root2).grid(row=i, column=3)

        tk.Button(self.root2, text="Submit", command=self.calculate_priority_round_robin).grid(row=self.n, column=1)

        self.root2.mainloop()

    def calculate_priority_round_robin(self):
        for i in range(self.n):
            pid = int(self.root2.grid_slaves(row=i, column=1)[0].get())
            bt = int(self.root2.grid_slaves(row=i, column=3)[0].get())
            self.processes.append((pid, bt))

        quantum = 2  # Time quantum
        avg_wt, avg_tat, cache, output, hit_percentage, miss_percentage = priority_round_robin(list(self.processes), quantum, self.cache_size)

        self.root2.destroy()

        self.root3 = tk.Tk()
        self.root3.title("Priority Round Robin Scheduling Results")
        self.root3.geometry("300x200")

        tk.Label(self.root3, text=f"Average Waiting Time: {avg_wt}").pack()
        tk.Label(self.root3, text=f"Average Turnaround Time: {avg_tat}").pack()
        tk.Label(self.root3, text=f"Cache: {cache}").pack()
        tk.Label(self.root3, text=f"Cache Hit Percentage: {hit_percentage}%").pack()
        tk.Label(self.root3, text=f"Cache Miss Percentage: {miss_percentage}%").pack()
        for line in output:
            tk.Label(self.root3, text=line).pack()

        self.root3.mainloop()

if __name__ == "__main__":
    app = Application()
    app.mainloop()
